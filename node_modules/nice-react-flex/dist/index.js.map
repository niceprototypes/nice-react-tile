{"version":3,"file":"index.js","sources":["../src/constants.ts","../src/services/styleFlex/styleFlex.ts","../src/styles.ts","../src/services/normalizeProps/normalizeProps.ts","../src/Flex.tsx"],"sourcesContent":["/**\n * Breakpoint Constants\n * \n * Defines the responsive breakpoint system used throughout the Flex component.\n * These values determine when different responsive styles are applied.\n */\n\n/** Small breakpoint - mobile devices */\nexport const BREAKPOINT_SM = 480\n\n/** Medium breakpoint - tablets and small desktops */\nexport const BREAKPOINT_MD = 980\n\n/** Large breakpoint - large desktops */\nexport const BREAKPOINT_LG = 1280\n\n/**\n * Media Queries\n * \n * Pre-built media query strings for responsive design.\n * These are used in styled-components to apply styles at different screen sizes.\n */\n\n/** Media query for medium screens and up (tablets+) */\nexport const MEDIA_MIN_MD = `@media (min-width: ${BREAKPOINT_MD}px)`\n\n/** Media query for large screens and up (desktops+) */\nexport const MEDIA_MIN_LG = `@media (min-width: ${BREAKPOINT_LG}px)`","import { FlexProps, GapSize, SpacingDefinition } from \"../../types\"\n\n/**\n * Supported breakpoint values for responsive styling\n * @type {\"sm\" | \"md\" | \"lg\"}\n */\ntype Breakpoint = \"sm\" | \"md\" | \"lg\"\n\n/**\n * Converts a GapSize value to its corresponding CSS custom property\n * \n * @function getGapSize\n * @param {GapSize} [size] - The gap size (0-6)\n * @returns {string | undefined} CSS custom property string or \"0\" for zero values\n * \n * @example\n * getGapSize(0) // returns \"0\"\n * getGapSize(3) // returns \"var(--gap-size-3)\"\n * getGapSize(undefined) // returns undefined\n */\nconst getGapSize = (size?: GapSize) =>\n  size !== undefined ? (size === 0 ? \"0\" : `var(--gap-size-${size})`) : undefined\n\n/**\n * Generates CSS spacing properties (padding or margin) from a SpacingDefinition\n * \n * @function styleSpacing\n * @param {\"padding\" | \"margin\"} type - Whether to generate padding or margin properties\n * @param {SpacingDefinition} [def] - Spacing configuration object\n * @returns {string} CSS property declarations separated by newlines\n * \n * @description\n * This function applies spacing values with a priority system:\n * 1. Individual sides (top, right, bottom, left) - highest priority\n * 2. Axis shortcuts (horizontal→left+right, vertical→top+bottom)\n * 3. All sides (all) - lowest priority\n * \n * The function only generates CSS for sides that have defined values,\n * allowing for partial spacing definitions.\n * \n * @example\n * // Simple all-sides spacing\n * styleSpacing(\"padding\", { all: 2 })\n * // Returns: \"padding-top: var(--gap-size-2);\\npadding-right: var(--gap-size-2);\\n...\"\n * \n * @example\n * // Mixed priority spacing\n * styleSpacing(\"margin\", { all: 1, horizontal: 2, top: 3 })\n * // Returns: \"margin-top: var(--gap-size-3);\\nmargin-right: var(--gap-size-2);\\n...\"\n * // (top=3 overrides all=1, horizontal=2 overrides all=1 for left/right)\n */\nconst styleSpacing = (type: \"padding\" | \"margin\", def?: SpacingDefinition) => {\n  if (!def) return \"\"\n  const prefix = type\n\n  // Apply priority system: individual > axis shortcuts > all\n  const styles = {\n    top: def.top ?? def.vertical ?? def.all,\n    right: def.right ?? def.horizontal ?? def.all,\n    bottom: def.bottom ?? def.vertical ?? def.all,\n    left: def.left ?? def.horizontal ?? def.all,\n  }\n\n  const parts: string[] = []\n\n  // Generate CSS declarations only for defined values\n  if (styles.top !== undefined) {\n    parts.push(`${prefix}-top: ${getGapSize(styles.top)};`)\n  }\n  if (styles.right !== undefined) {\n    parts.push(`${prefix}-right: ${getGapSize(styles.right)};`)\n  }\n  if (styles.bottom !== undefined) {\n    parts.push(`${prefix}-bottom: ${getGapSize(styles.bottom)};`)\n  }\n  if (styles.left !== undefined) {\n    parts.push(`${prefix}-left: ${getGapSize(styles.left)};`)\n  }\n\n  return parts.join(\"\\n\")\n}\n\n/**\n * styleFlex Service\n * \n * Generates CSS styling for a specific breakpoint based on normalized Flex component props.\n * This is the core styling logic that transforms component props into CSS declarations.\n * \n * @function styleFlex\n * @param {Breakpoint} breakpoint - The breakpoint to generate styles for (sm/md/lg)\n * @param {FlexProps} props - The normalized Flex component props\n * @returns {string} CSS declarations separated by newlines\n * \n * @description\n * This service handles the generation of all CSS properties for the Flex component:\n * \n * **Base Display**: Sets `display: flex` only for the 'sm' breakpoint to establish\n * the flexbox context. Higher breakpoints inherit this display value.\n * \n * **Responsive Value Extraction**: For each CSS property, the function extracts\n * the appropriate value based on whether the prop is a simple value or breakpoint object:\n * - Object props: Use the value for the current breakpoint\n * - Simple props: Only use for 'sm' breakpoint (since props are normalized)\n * \n * **CSS Property Generation**: Generates standard CSS flexbox properties:\n * - `flex-direction`: Controls layout direction (row/column)\n * - `align-items`: Aligns items on the cross axis\n * - `justify-content`: Aligns items on the main axis\n * - `flex-grow` & `flex-basis`: Controls item growth behavior\n * - `gap`: Sets space between flex items using CSS Grid gap\n * \n * **Spacing Integration**: Uses the styleSpacing helper to generate padding\n * or margin properties with full side-by-side control.\n * \n * The function is designed to work with props that have been processed by\n * the normalizeProps service, ensuring consistent prop structure.\n * \n * @example\n * // Generate small breakpoint styles\n * const props = { direction: { sm: \"column\" }, gap: { sm: 2 } }\n * styleFlex(\"sm\", props)\n * // Returns: \"display: flex;\\nflex-direction: column;\\ngap: var(--gap-size-2);\"\n * \n * @example\n * // Generate medium breakpoint styles\n * const props = { \n *   direction: { sm: \"column\", md: \"row\" }, \n *   gap: { sm: 1, md: 3 },\n *   spacing: { md: { horizontal: 2 } }\n * }\n * styleFlex(\"md\", props)\n * // Returns: \"flex-direction: row;\\ngap: var(--gap-size-3);\\npadding-left: var(--gap-size-2);\\npadding-right: var(--gap-size-2);\"\n */\nexport const styleFlex = (breakpoint: Breakpoint, props: FlexProps): string => {\n  const styles: string[] = []\n\n  // Extract values for this specific breakpoint\n  // For object props, get the breakpoint-specific value\n  // For simple props, only apply at 'sm' breakpoint (since props are normalized)\n  \n  const direction =\n    typeof props.direction === \"object\"\n      ? props.direction[breakpoint]\n      : breakpoint === \"sm\" && typeof props.direction === \"string\"\n        ? props.direction\n        : undefined\n\n  const gap =\n    typeof props.gap === \"object\"\n      ? props.gap[breakpoint]\n      : breakpoint === \"sm\" && typeof props.gap === \"number\"\n        ? props.gap\n        : undefined\n\n  const grow =\n    typeof props.grow === \"object\"\n      ? props.grow[breakpoint]\n      : breakpoint === \"sm\" && typeof props.grow === \"number\"\n        ? props.grow\n        : undefined\n\n  const alignItems =\n    typeof props.alignItems === \"object\"\n      ? props.alignItems[breakpoint]\n      : breakpoint === \"sm\" && typeof props.alignItems === \"string\"\n        ? props.alignItems\n        : undefined\n\n  const justifyContent =\n    typeof props.justifyContent === \"object\"\n      ? props.justifyContent[breakpoint]\n      : breakpoint === \"sm\" && typeof props.justifyContent === \"string\"\n        ? props.justifyContent\n        : undefined\n\n  // Spacing requires checking for breakpoint structure\n  const spacing =\n    typeof props.spacing === \"object\" &&\n    (\"sm\" in props.spacing || \"md\" in props.spacing || \"lg\" in props.spacing)\n      ? (props.spacing as any)[breakpoint]\n      : undefined\n\n  // Base flex display - only set for small breakpoint\n  // Higher breakpoints inherit the flex display value\n  if (breakpoint === \"sm\") {\n    styles.push(\"display: flex;\")\n  }\n\n  // Flex direction - controls main axis direction\n  if (direction) {\n    styles.push(`flex-direction: ${direction};`)\n  }\n\n  // Alignment properties\n  if (alignItems) {\n    styles.push(`align-items: ${alignItems};`)\n  }\n\n  if (justifyContent) {\n    styles.push(`justify-content: ${justifyContent};`)\n  }\n\n  // Flex growth - when grow is set, also set flex-basis to 0 for proper behavior\n  if (grow !== undefined) {\n    styles.push(`flex-grow: ${grow};`)\n    styles.push(\"flex-basis: 0;\")\n  }\n\n  // Gap between flex items using CSS Grid gap property\n  if (gap !== undefined) {\n    styles.push(`gap: var(--gap-size-${gap});`)\n  }\n\n  // Spacing (padding/margin) using the spacing helper\n  if (spacing) {\n    const spacingStyles = styleSpacing(props.type || \"padding\", spacing)\n    if (spacingStyles) {\n      styles.push(spacingStyles)\n    }\n  }\n\n  return styles.join(\"\\n\")\n}\n\nexport default styleFlex\n","import styled from \"styled-components\"\nimport { MEDIA_MIN_LG, MEDIA_MIN_MD } from \"./constants\"\nimport { FlexProps } from \"./types\"\nimport { styleFlex } from \"./services/styleFlex\"\n\n/**\n * FlexStyled - Styled Component\n * \n * The main styled component that applies responsive flexbox styling to a div element.\n * Uses the styleFlex service to generate CSS for different breakpoints.\n * \n * @component FlexStyled\n * @extends {styled.div}\n * @type {FlexProps}\n * \n * @description\n * This styled component serves as the foundation for the Flex component's visual behavior.\n * It combines styled-components with responsive design patterns to create a powerful\n * layout system.\n * \n * **Key Features:**\n * \n * 1. **Prop Filtering**: Uses `shouldForwardProp` to prevent style-related props from\n *    being passed to the DOM, avoiding React warnings about unknown DOM properties.\n *    Filtered props: type, spacing, gap, direction, alignItems, justifyContent, grow\n * \n * 2. **Mobile-First Responsive Design**: Applies styles in a mobile-first approach:\n *    - Base styles: Always applied (sm breakpoint)\n *    - Medium styles: Applied at 980px+ (md breakpoint)  \n *    - Large styles: Applied at 1280px+ (lg breakpoint)\n * \n * 3. **Service Integration**: Delegates actual CSS generation to the styleFlex service,\n *    keeping the styled component focused on responsive breakpoint management.\n * \n * 4. **Clean Separation**: Separates styling logic from component structure, making\n *    the codebase more maintainable and testable.\n * \n * **CSS Generation Flow:**\n * 1. Component receives normalized props from normalizeProps service\n * 2. For each breakpoint (sm/md/lg), styleFlex generates appropriate CSS\n * 3. Media queries ensure styles are applied at correct screen sizes\n * 4. Higher breakpoint styles override lower ones as expected in CSS\n * \n * **Breakpoint System:**\n * - Small (sm): 0px+ - Base mobile styles, always applied\n * - Medium (md): 980px+ - Tablet and small desktop styles\n * - Large (lg): 1280px+ - Large desktop styles\n * \n * The component follows CSS cascade principles where later styles override earlier ones,\n * enabling predictable responsive behavior.\n * \n * @example\n * // Basic usage in component\n * <FlexStyled direction={{ sm: \"column\", md: \"row\" }} gap={{ sm: 1, lg: 3 }}>\n *   <div>Content</div>\n * </FlexStyled>\n * \n * @example\n * // Generated CSS structure\n * .FlexStyled-abc123 {\n *   // sm breakpoint styles (always applied)\n *   display: flex;\n *   flex-direction: column;\n *   gap: var(--gap-size-1);\n * }\n * @media (min-width: 980px) {\n *   .FlexStyled-abc123 {\n *     // md breakpoint styles\n *     flex-direction: row;\n *   }\n * }\n * @media (min-width: 1280px) {\n *   .FlexStyled-abc123 {\n *     // lg breakpoint styles\n *     gap: var(--gap-size-3);\n *   }\n * }\n */\nexport const FlexStyled = styled.div.withConfig({\n  shouldForwardProp: (prop) =>\n    ![\"type\", \"spacing\", \"gap\", \"direction\", \"alignItems\", \"justifyContent\", \"grow\"].includes(\n      prop as string\n    ),\n})<FlexProps>`\n  ${(props) => styleFlex('sm', props)}\n\n  ${MEDIA_MIN_MD} {\n    ${(props) => styleFlex('md', props)}\n  }\n\n  ${MEDIA_MIN_LG} {\n    ${(props) => styleFlex('lg', props)}\n  }\n`\n","import { FlexProps, GapSize, SpacingDefinition } from \"../../types\"\n\n/**\n * List of props that accept breakpoint values\n * These props can be specified as either simple values or breakpoint objects.\n * Note: spacing is handled separately due to its more complex structure\n */\nconst BREAKPOINT_PROPS = [\"gap\", \"direction\", \"grow\"] as const\n\n/**\n * normalizeProps Service\n * \n * Transforms component props to ensure consistent structure for styling logic.\n * Converts simple prop values into breakpoint objects to simplify downstream processing.\n * \n * @function normalizeProps\n * @param {FlexProps} props - The raw props passed to the Flex component\n * @returns {FlexProps} Normalized props with consistent breakpoint structure\n * \n * @description\n * This service performs two main transformations:\n * \n * 1. **Simple Value Normalization**: Converts simple prop values into breakpoint objects\n *    - Example: `gap={2}` becomes `gap={{ sm: 2 }}`\n *    - Example: `direction=\"row\"` becomes `direction={{ sm: \"row\" }}`\n *    - This ensures the styling logic only needs to handle one format\n * \n * 2. **Spacing Normalization**: Handles the special case of the spacing prop\n *    - Simple number: `spacing={3}` → `spacing={{ sm: { all: 3 } }}`\n *    - SpacingDefinition: `spacing={{ all: 3 }}` → `spacing={{ sm: { all: 3 } }}`\n *    - Already normalized: `spacing={{ sm: {...} }}` → unchanged\n * \n * Why this normalization is important:\n * - **Consistency**: The styling logic (styleFlex) only needs to handle one format\n * - **Simplicity**: Reduces complexity in the styled-components implementation\n * - **Flexibility**: Users can provide props in the most convenient format\n * - **Type Safety**: Maintains TypeScript type safety throughout the transformation\n * \n * @example\n * // Input: Simple values\n * normalizeProps({\n *   gap: 2,\n *   direction: \"row\",\n *   children: <div />\n * })\n * // Output: Breakpoint objects\n * {\n *   gap: { sm: 2 },\n *   direction: { sm: \"row\" },\n *   children: <div />\n * }\n * \n * @example\n * // Input: Mixed simple and responsive values\n * normalizeProps({\n *   gap: 2,\n *   direction: { sm: \"column\", md: \"row\" },\n *   spacing: { all: 3 },\n *   children: <div />\n * })\n * // Output: All values normalized to breakpoint format\n * {\n *   gap: { sm: 2 },\n *   direction: { sm: \"column\", md: \"row\" },\n *   spacing: { sm: { all: 3 } },\n *   children: <div />\n * }\n */\nconst normalizeProps = (props: FlexProps): FlexProps => {\n  // Create a shallow copy to avoid mutating the original props\n  const normalizedProps = { ...props }\n  \n  // Process standard breakpoint props (gap, direction, grow)\n  // These props can be either simple values or breakpoint objects\n  BREAKPOINT_PROPS.forEach((propName) => {\n    const value = props[propName as keyof FlexProps]\n    if (value !== undefined && typeof value !== \"object\") {\n      // Convert simple value to breakpoint object with sm value\n      // The semicolon at the start prevents ASI issues with the bracket notation\n      ;(normalizedProps as any)[propName] = { sm: value }\n    }\n  })\n  \n  // Special handling for the spacing prop due to its nested structure\n  if (props.spacing !== undefined) {\n    if (typeof props.spacing === \"number\") {\n      // Simple number becomes a SpacingDefinition at sm breakpoint\n      // spacing={3} -> spacing={{ sm: { all: 3 } }}\n      normalizedProps.spacing = { sm: { all: props.spacing as GapSize } }\n    } else if (!(\"sm\" in props.spacing || \"md\" in props.spacing || \"lg\" in props.spacing)) {\n      // SpacingDefinition object becomes breakpoint-wrapped\n      // spacing={{ all: 3 }} -> spacing={{ sm: { all: 3 } }}\n      normalizedProps.spacing = { sm: props.spacing as SpacingDefinition }\n    }\n    // If already has breakpoint keys (sm/md/lg), leave as-is\n  }\n  \n  return normalizedProps\n}\n\nexport default normalizeProps","import * as React from \"react\"\nimport { FlexStyled } from \"./styles\"\nimport { FlexProps } from \"./types\"\nimport normalizeProps from \"./services/normalizeProps\"\n\n/**\n * Flex Component\n * \n * A highly flexible and responsive flexbox container component that provides\n * comprehensive layout control with breakpoint-based responsive design.\n * \n * @component\n * @example\n * // Basic usage with static props\n * <Flex direction=\"row\" gap={2} alignItems=\"center\">\n *   <div>Item 1</div>\n *   <div>Item 2</div>\n * </Flex>\n * \n * @example\n * // Responsive usage with breakpoint-based props\n * <Flex \n *   direction={{ sm: \"column\", md: \"row\" }}\n *   gap={{ sm: 1, md: 2, lg: 3 }}\n *   alignItems=\"center\"\n * >\n *   <div>Responsive Item 1</div>\n *   <div>Responsive Item 2</div>\n * </Flex>\n * \n * @example\n * // Using spacing for padding/margin\n * <Flex \n *   type=\"padding\"\n *   spacing={{ all: 2 }}\n *   gap={1}\n * >\n *   <div>Padded content</div>\n * </Flex>\n * \n * @param {FlexProps} props - The component props\n * @returns {JSX.Element} A styled div element with flexbox properties\n * \n * @description\n * The Flex component serves as a versatile container that leverages CSS Flexbox\n * for creating responsive layouts. It supports:\n * \n * 1. **Responsive Design**: All layout props can be specified as either static values\n *    or responsive objects with sm/md/lg breakpoints\n * \n * 2. **Automatic Prop Normalization**: The component automatically normalizes props\n *    to ensure consistent behavior. Simple values are converted to breakpoint objects\n *    with the value applied to the 'sm' breakpoint.\n * \n * 3. **Spacing Management**: Supports both padding and margin with granular control\n *    over all sides (top, right, bottom, left) or shortcuts (horizontal, vertical, all)\n * \n * 4. **Gap Support**: Uses CSS gap property for consistent spacing between flex items\n * \n * 5. **Growth Control**: Allows flex items to grow with configurable flex-grow values\n * \n * The component uses styled-components for styling and filters out style props before\n * passing them to the DOM to avoid React warnings about unknown DOM properties.\n */\nconst Flex: React.FC<FlexProps> = (props) => {\n  // Normalize props to ensure all breakpoint-capable props are in object format\n  // This simplifies the styling logic by providing a consistent prop structure\n  const normalizedProps = normalizeProps(props)\n  \n  // Render the styled component with normalized props\n  // Children are passed through from original props to maintain reference integrity\n  return <FlexStyled {...normalizedProps}>{props.children}</FlexStyled>\n}\n\nexport default Flex\n"],"names":["React"],"mappings":"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"}